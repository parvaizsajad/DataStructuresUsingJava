package ll;



public class LL {
	// we will create one inner class which will be used  to create one new node in the link list if we want to enter it any where.
		public class Node{
			//the node will contain two fields data and the next. Data will store 
			//the data example 5,8 and the node will store the address of the next node.
			
			int data ;
			Node next;
			Node prev;
			public Node(int data) {
				//here we will set the data outside equal the inner data.
				this.data=data;
				
			}//closing of the constructor
			
		}//ending of the inner class node....
	Node head;//we will create the field head of the type node.....
	Node tail; // the tail of the type node.
	int size=0;//size of the type int to track the size of the link list.
	// method to append the element at the end of the link list.
	public String toString() {// to string method to print the output in the braces and saperated by commas....
		StringBuffer sb=new StringBuffer();// we will create the sting buffer to manuplate the string.
		sb.append("[");// first we will append the opening square brackets.
		Node curr=head; // we will create the new node curr which we will use to iterate over the link list....
	while(curr !=null) {// here condition will be curr not equal to the not which will be the last node of the ll.
		sb.append(curr.data).append(","); // then we will append the curr.data .here curr is the counter of 
		//the loop and it will give us the data
		//after ever iteration of the loop the curr will start from the head that means it will start from the first element.
		curr=curr.next;// here we are incrementing the curr value and pointing it to the curr.next value.... node can not be incremented
		//with the i++ .

	}//ending of the while loop
	if(sb.length()>1) {// when ever we add the commas we will have an extra comma in the output 
		sb.deleteCharAt(sb.length()-1);//// here we will use the method delete char at length minus 1 to get the last element of the string.
	}
		sb.append("]");// at last we will append the closing the bracket 
		
		return sb.toString(); //ad return the sb string 
	}
	public void add(int data) {
		Node newNode=new Node(data);
		Node curr = null;
	if(curr==null) {
   
        head=tail=newNode;
   }
	else 
	{
	   tail.next=newNode;
	   newNode.prev=tail;
	   newNode=tail;
	   
   }
	size++;
	System.out.println(this);
	}
	public int get(int index) {
		
		return index;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
LL ll=new LL();
ll.add(2);
ll.add(3);
ll.add(4);
System.out.println(ll.size);
	}

}
