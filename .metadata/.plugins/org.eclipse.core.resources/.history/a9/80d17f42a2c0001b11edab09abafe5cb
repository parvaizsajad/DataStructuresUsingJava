
public class QuickSort {
	

	void printArray(int  []A)
	{
	    for (int i = 0; i < A.length; i++)
	    {
	      
	        System.out.print(A[i]+" ");
	    }
	   System.out.println();
	}

	public int partition(int A[], int low, int high)
	{
	    int pivot = A[low];
	    int i = low + 1;
	    int j = high;
	    int temp;

	    do
	    {
	        while (A[i] <= pivot)
	        {
	            i++;
	        }

	        while (A[j] > pivot)
	        {
	            j--;
	        }

	        if (i < j)
	        {
	            temp = A[i];
	            A[i] = A[j];
	            A[j] = temp;
	        }
	    } while (i < j);

	    // Swap A[low] and A[j]
	    temp = A[low];
	    A[low] = A[j];
	    A[j] = temp;
	    return j;
	}

public	void quickSort(int A[], int low, int high)
	{
	    int partitionIndex; // Index of pivot after partition

	    if (low < high)
	    {
	        partitionIndex = partition(A, low, high-1); 
	        quickSort(A, low, partitionIndex - 1);  // sort left subarray 
	        quickSort(A, partitionIndex + 1, high); // sort right subarray
	    }
	}
public static void main(String[] args) {
	 //int A[] = {3, 5, 2, 13, 12, 3, 2, 13, 45};
    int A[] = {9, 4, 4, 8, 7, 5, 6};
    // 3, 5, 2, 13, 12, 3, 2, 13, 45
    // 3, 2, 2, 13i, 12, 3j, 5, 13, 45
    // 3, 2, 2, 3j, 12i, 13, 5, 13, 45 --> first call to partition returns 3
    int n = A.length;
    QuickSort qs= new QuickSort();
   
    qs.printArray(A);
   qs. quickSort(A, 0, n - 1);
    qs.printArray(A);
}


}
